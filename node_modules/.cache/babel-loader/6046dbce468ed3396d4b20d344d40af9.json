{"ast":null,"code":"import _toConsumableArray from \"/Users/danrunion/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/danrunion/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danrunion/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danrunion/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danrunion/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danrunion/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/danrunion/Desktop/clicky-game/src/components/Game/index.js\";\nimport React, { Component } from 'react';\nimport './style.scss';\nimport cardData from \"../../cards.json\";\nimport Card from '../Card';\nimport NavBar from '../NavBar';\nimport imgPath from './images/mySerusS.png';\nconsole.log(imgPath);\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      score: 0,\n      highScore: 0,\n      cardData: cardData,\n      clickedList: []\n    };\n\n    _this.handleClick = function (cardId) {\n      var _this$state = _this.state,\n          score = _this$state.score,\n          clickedList = _this$state.clickedList,\n          cardData = _this$state.cardData,\n          highScore = _this$state.highScore;\n      var isClicked = clickedList.includes(cardId);\n\n      _this.shuffleShit(cardData);\n\n      if (isClicked) {\n        alert(\"You are dumb. Don't click that one again!\");\n        var bestScore = Math.max(score, highScore);\n\n        _this.resetGame(bestScore);\n      } else {\n        var newScore = score + 1;\n\n        _this.setState({\n          clickedList: [].concat(_toConsumableArray(clickedList), [cardId]),\n          score: newScore\n        });\n\n        if (newScore === cardData.length) {\n          alert(\"You win!\");\n\n          _this.resetGame(newScore);\n        }\n      }\n    };\n\n    _this.resetGame = function (highScore) {\n      _this.setState({\n        score: 0,\n        clickedList: [],\n        highScore: highScore\n      });\n    };\n\n    _this.shuffleShit = function (array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      _this.setState({\n        cardData: array\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var cardData = this.state.cardData;\n      this.shuffleShit(cardData);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        headingText: \"Score:\",\n        headingValue: this.state.score,\n        primaryHeadingText: \"High Score:\",\n        primaryHeadingValue: this.state.highScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"cardStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.state.cardData.map(function (card) {\n        return React.createElement(Card, {\n          key: card.id,\n          id: card.id,\n          image: card.image,\n          name: card.name,\n          handleClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/danrunion/Desktop/clicky-game/src/components/Game/index.js"],"names":["React","Component","cardData","Card","NavBar","imgPath","console","log","Game","state","score","highScore","clickedList","handleClick","cardId","isClicked","includes","shuffleShit","alert","bestScore","Math","max","resetGame","newScore","setState","length","array","i","j","floor","random","temp","map","card","id","image","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './style.scss';\nimport cardData from \"../../cards.json\";\nimport Card from '../Card';\nimport NavBar from '../NavBar';\nimport imgPath from './images/mySerusS.png'\n\nconsole.log(imgPath)\n\nclass Game extends Component {\n\n    state = {\n        score: 0,\n        highScore: 0,\n        cardData: cardData,\n        clickedList: []\n    }\n\n    componentDidMount() {\n        const {cardData } = this.state;\n        this.shuffleShit(cardData);\n    }\n\n    handleClick = (cardId) => {\n        const {score, clickedList, cardData, highScore} = this.state;\n        const isClicked = clickedList.includes(cardId);\n        this.shuffleShit(cardData);\n        if (isClicked) {\n            alert(\"You are dumb. Don't click that one again!\");\n            const bestScore = Math.max(score, highScore);\n            this.resetGame(bestScore);\n        }\n        else {\n            const newScore = score + 1;\n            this.setState({\n                clickedList: [...clickedList, cardId],\n                score: newScore\n            })\n            \n            if (newScore === cardData.length) {\n                alert(\"You win!\");\n                this.resetGame(newScore);\n            }\n        }        \n        \n        \n    }\n\n    resetGame = highScore => {\n        this.setState({\n            score: 0,\n            clickedList: [],\n            highScore: highScore\n        })\n    }\n\n    shuffleShit = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n\n        this.setState({\n            cardData: array\n        })\n    }\n\n    render() {\n        return (\n            <div>\n              <NavBar \n                headingText=\"Score:\"\n                headingValue={this.state.score}\n                primaryHeadingText=\"High Score:\"\n                primaryHeadingValue={this.state.highScore}\n                />\n                <div className=\"cardStyle\">\n               {this.state.cardData.map((card) => (\n                    <Card   \n                         key={card.id}\n                        id={card.id}\n                        image={card.image} \n                        name={card.name} \n                        handleClick={this.handleClick}\n                    />  \n                 ))}   \n                 </div> \n            </div>\n        );\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}